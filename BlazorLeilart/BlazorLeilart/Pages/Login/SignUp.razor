@page "/signup"

@using BlazorLeilart.Shared
@using BlazorLeilart.Authentication 
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject IJSRuntime js
@inject Data.Interfaces.IUser database;
@layout LoginLayout

<div class="flex flex-row">
    <div class="w-full justify-items-stretch">
        <img src="https://placehold.co/1000"/>
    </div>
    
    <div class="w-full mt-16 mx-16">
        <img src="images/leilart.svg"/>
        <div class="my-48 justify-items-center">
            <div>
                <div class="form-group w-1/2">
                    <h4 class="text-2xl font-semibold my-4">Signup</h4>
                    <label for="email" class="font-regular">Email*</label>
                    <input type="string" id="email" @bind="email" class="form-control border-2 py-2 px-4 my-2 border-black rounded-sm w-full"/>
                    
                    <label for="phone" class="font-regular">Cellphone</label>
                    <input type="phone" id="phone" @bind="phone" class="form-control border-2 py-2 px-4 my-2 border-black rounded-sm w-full"/>
                    <label for="pass" class="font-regular">Password</label>
                    <input type="pass" id="pass" @bind="password" class="form-control border-2 py-2 px-4 my-2 border-black rounded-sm w-full"/>
                </div>
                <div class="mt-8">
                    <button @onclick="SignUpFunc" class="border-2 py-2 px-4 border-black rounded-sm bg-black text-white">
                        Sign up
                    </button>
                </div>
                @if (error != "")
                {
                    <p class="text-md text-red-500">@error</p>
                }
                
            </div>
            <div class="mt-1">
                <p>Already have an Account?</p>
                <a href="/login">Login</a>
            </div>
        </div>
    </div>
</div>

@code {
    
    private string error = "";

    [Required] public string email = "";
    public string phone = "";
    [Required] public string password = "";
        

    public async Task<bool> IsValidEmail(string email)
    {
        // Check if the email is empty or null
        if (string.IsNullOrWhiteSpace(email))
            return false;
    
        // Define a regular expression pattern for basic email validation
        string pattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
        bool isEmailValid = Regex.IsMatch(email, pattern);
    
        // If the email format is not valid, return false
        if (!isEmailValid)
            return false;
        
        // Check if the email already exists in the database
        int count = await database.ContainsKeyAsync(email);
        
        // If the count is greater than 0, the email already exists
        return count == 0;
        
    }
    
    public async Task<bool> IsValidPassword(string password)
    {
        return password != null && password.Length > 0;
    }
    
    private async Task SignUpFunc()
    {
        bool result = await IsValidEmail(email) && await IsValidPassword(password);
        if (result)
        {
            User user = new User(email, phone, password, false);
            bool user_insert = await database.PutUserAsync(user);

            if (user_insert)
            {
                js.InvokeVoidAsync("alert", "Account created!");
            }
        }
        else
        {
            if (!await IsValidEmail(email)) error = "Invalid Email";
            if (!await IsValidPassword(password)) error = "Invalid Password";
        }
        
        Task.Delay(1000);
        
        
    }
  
}