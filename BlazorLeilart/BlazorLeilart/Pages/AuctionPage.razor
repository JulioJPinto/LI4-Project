@inject Data.IDBConnection database
@page "/auction/{auctionid}"

@if (!_loading)
{
    <div class="mx-80">
        Loading
    </div>
}
else
{
  <div class="mx-80 mt-16">
      <div class="flex flex-row gap-16">
          <div class="flex flex-col">
              <img src="https://placehold.co/300"/>
              <div class="flex flex-row gap-4 mt-4">
                  <img src="https://placehold.co/300"/>
                  <img src="https://placehold.co/300"/>
              </div>
          </div>
          <div class="mt-8">
              <h2 class="text-6xl font-bold">@product.name</h2>
              <div class="mt-8 py-4 px-16 rounded-lg border-2">
                  <div class="text-6xl font-semibold text-center  ">@auction.initial_value.00 €</div>
              </div>
              <div class="mt-2 text-md font-regular">Increments: @auction.minimum_value.00 €</div>
              <div class="mt-64 flex flex-row">
                  <PrimaryButton Title="Bid"/>
                  <input @bind="_bid" class="border-2 py-2 px-4 mx-2 border-black rounded-sm w-full">
              </div>
          </div>
      </div>
  </div>
  
}

@code {
    [Parameter]
    public string auctionid { get; set; }
    public bool _loading = false;
    public double _bid;

    public Auction auction;
    public Product product;

    protected override async Task OnInitializedAsync()
    {
        var query1 = @"SELECT * FROM auction WHERE id = @auctionid";
        var parameters1 = new { auctionid };

        auction = await database.Connection.QueryFirstAsync<Auction>(query1, parameters1);

        var query2 = @"SELECT * FROM product WHERE id = @idp";
        int idp = auction.product_id;
        var parameters2 = new { idp };
        
        product = await database.Connection.QueryFirstOrDefaultAsync<Product>(query2, parameters2) ?? new Product();

        _loading = true;
    }

    public async Task BidFunc()
    {
        
    }
}
