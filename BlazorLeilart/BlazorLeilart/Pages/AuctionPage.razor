@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject NavigationManager NavigationManager
@using BlazorLeilart.Authentication
@inject Data.Interfaces.IAuction auctiondb
@inject Data.Interfaces.IProduct productbd
@inject Data.Interfaces.IBiddings bidsdb
@inject Data.Interfaces.IUser userdb
@inject IJSRuntime js
@page "/auction/{auctionid}"

@if (!_loading)
{
    <div class="mx-80">
        Loading
    </div>
}
else
{
  <div class="mx-80 mt-16">
      <div class="flex flex-row gap-16">
          <div class="flex flex-col">
              <img src="https://placehold.co/300"/>
              <div class="flex flex-row gap-4 mt-4">
                  <img src="https://placehold.co/300"/>
                  <img src="https://placehold.co/300"/>
              </div>
          </div>
          <div class="mt-8">
              <h2 class="text-6xl font-bold">@auction.Product.name</h2>
              <div class="mt-8 py-4 px-16 rounded-lg border-2">
                  
                  <div class="text-6xl font-semibold text-center  ">
                      @if (auction.Bids.Count == 0)
                      {
                          <p>@auction.initial_value.00 €</p>
                      }
                      else
                      {     
                          <p>@auction.Bids.Last().value.00 €</p>
                      } 
                      
                  </div>
              </div>
              <div class="mt-2 text-md font-regular">Increments: @auction.increment.00 €</div>
              @if (auction.status && !user.Admin)
              {
                  <div class="mt-64 flex flex-row">
                      <a @onclick="BidFunc">
                          <PrimaryButton Title="Bid"/>
                      </a>
                      <input @bind="_bid" class="border-2 py-2 px-4 mx-2 border-black rounded-sm w-full">
                  </div>
                  @if (error != "")
                  {
                      <p class="text-md my-2 text-red-500">@error</p>
                  } 
              }
              @if (user.Admin)
              {
                  <div class="mt-64 flex flex-row">
                      <a @onclick="FinishFunc">
                          <PrimaryButton Title="Finish Auction"/>
                      </a>
                  </div>
              }
              
              
          </div>
      </div>
  </div>
  
}

@code {
    [Parameter]
    public string auctionid { get; set; }
    public bool _loading = false;
    public bool _editing = false;
    public int _bid;
    public int user_id = -1;
    public string error;

    public Auction auction;
    public User user;

    protected override async Task OnInitializedAsync()
    {
        auction = await auctiondb.GetAuctionbyIdAsync(auctionid);
        auction.Product = await productbd.GetProductByIdAsync(auction.product_id.ToString());
        auction.Bids = await bidsdb.GetAllBiddingsFilteredbyAuctionAsync(auctionid);
        
        if (await localStore.ContainKeyAsync("session"))
        {
            // Retrieve the session from local storage
            string token = TokenSession.Base64Decode(await localStore.GetItemAsync<string>("session")); 
            user = (await userdb.GetUserByEmailAsync(token));
            user_id = user.Id;
        }

        Task.Delay(2000);
        _loading = true;
    }
    
    public async Task BidFunc()
    
    {
        if (user_id == -1)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            if ((auction.Bids.Count > 0 && _bid <= auction.Bids.Last().value + auction.increment) ||
                (auction.Bids.Count == 0 && _bid <= auction.initial_value + auction.increment))
            {
                error = "Invalid Amount";
            }
             else
             {  
                 Console.WriteLine((auction.Bids.Last().value));
                 Console.WriteLine((auction.increment));
                 Bidding current_bid = new Bidding(_bid, auction.id, user_id);

                 bool validate_insert = await bidsdb.PutBiddingAsync(current_bid);
                 auction.Bids.Add(current_bid);
                 StateHasChanged();
             }
                
        }
        
    }

    public async Task FinishFunc()
    {
        auction.finishAuction();
        bool updated = await auctiondb.UpdateAuction(auction);
        
        if (updated)
        {
            js.InvokeVoidAsync("alert", "Account created!");
        }

    }
    
}
