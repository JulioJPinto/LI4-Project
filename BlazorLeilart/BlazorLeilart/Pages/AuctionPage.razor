@inject Data.IDBConnection database
@page "/auction/{auctionid}"

<div class="mx-80 mt-16">
    <div class="flex flex-row gap-16">
        <div class="flex flex-col">
            <img src="https://placehold.co/300"/>
            <div class="flex flex-row gap-4 mt-4">
                <img src="https://placehold.co/300"/>
                <img src="https://placehold.co/300"/>
            </div>
        </div>
        <div class="mt-8">
            <h2 class="text-6xl font-bold">@product.name</h2>
            <div class="mt-8 py-4 px-16 rounded-lg border-2">
                <div class="text-6xl font-semibold text-center  ">@auction.ValorInicial</div>
            </div>
            <div class="mt-2 text-md font-regular">Increments: @auction.ValorMinimo</div>
            <div class="mt-64 flex flex-row">
                <PrimaryButton Title="Bid"/>
                <input class="border-2 py-2 px-4 mx-2 border-black rounded-sm w-full">  
            </div>
        </div>

    </div>

</div>

@code {

    [Parameter]
    public string auctionid { get; set; }

    public Auction auction;
    public Product? product;
    
    
    
    protected override async Task OnInitializedAsync()
    {
        
        var query = @"SELECT * FROM auction WHERE Id = @auctionid";
        var parameters = new { auctionid };

        auction = await database.Connection.QueryFirstOrDefaultAsync<Auction>(query, parameters);
        
        query = @"
                SELECT p.*
                FROM auction a
                INNER JOIN product p ON a.IdProduto = p.Id
                WHERE a.Id = @auctionid";

        parameters = new { auctionid };

        product = await database.Connection.QueryFirstOrDefaultAsync<Product>(query, parameters);
        
        
    }
    private bool _hasFinished = false;

}