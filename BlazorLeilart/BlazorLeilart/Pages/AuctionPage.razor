@inject Data.IDBConnection database
@inject Blazored.LocalStorage.ILocalStorageService localStore
@using BlazorLeilart.Authentication
@page "/auction/{auctionid}"

@if (!_loading)
{
    <div class="mx-80">
        Loading
    </div>
}
else
{
  <div class="mx-80 mt-16">
      <div class="flex flex-row gap-16">
          <div class="flex flex-col">
              <img src="https://placehold.co/300"/>
              <div class="flex flex-row gap-4 mt-4">
                  <img src="https://placehold.co/300"/>
                  <img src="https://placehold.co/300"/>
              </div>
          </div>
          <div class="mt-8">
              <h2 class="text-6xl font-bold">@product.name</h2>
              <div class="mt-8 py-4 px-16 rounded-lg border-2">
                  
                  <div class="text-6xl font-semibold text-center  ">
                      @if (bids.Count == 0)
                      {
                          <p>@auction.initial_value.00 €</p>
                      }
                      else
                      {     
                          <p>@bids.Last().value.00 €</p>
                      } 
                      
                  </div>
              </div>
              <div class="mt-2 text-md font-regular">Increments: @auction.minimum_value.00 €</div>
              <div class="mt-64 flex flex-row">
                  <a @onclick="BidFunc">
                      <PrimaryButton Title="Bid"/>
                  </a>
                  <input @bind="_bid" class="border-2 py-2 px-4 mx-2 border-black rounded-sm w-full">
              </div>
              @if (error != "")
              {
                  <p class="text-md my-2 text-red-500">@error</p>
              }
          </div>
      </div>
  </div>
  
}

@code {
    [Parameter]
    public string auctionid { get; set; }
    public bool _loading = false;
    public int _bid;
    public string error;

    public Auction auction;
    public Product product;
    public List<Bidding> bids;

    protected override async Task OnInitializedAsync()
    {
        var query1 = @"SELECT * FROM auction WHERE id = @auctionid";
        var parameters1 = new { auctionid };

        auction = await database.Connection.QueryFirstAsync<Auction>(query1, parameters1);

        var query2 = @"SELECT * FROM product WHERE id = @idp";
        int idp = auction.product_id;
        var parameters2 = new { idp };
        
        product = await database.Connection.QueryFirstOrDefaultAsync<Product>(query2, parameters2) ?? new Product();
        
        var query3 = @"SELECT * FROM bidding WHERE auction_id = @auctionid ORDER BY value ASC;";
        var parameter3 = new { auctionid };
        
        bids = (await database.Connection.QueryAsync<Bidding>(query3, parameter3)).ToList();
        auction.Bids = bids;
        
        _loading = true;
    }

    private async Task BidFunc()
    
    {
        if (_bid < bids.Last().value + auction.increment)
        {
            error = "Invalid Amount";
        }
        else
        {
            string token, password;
            int user_id = -1;
            
            if (await localStore.ContainKeyAsync("session"))
            {
                // Retrieve the session from local storage
                token = TokenSession.Base64Decode(await localStore.GetItemAsync<string>("session"));
                string query = "SELECT id FROM [user] WHERE email = @inputEmail";
                user_id = database.Connection.ExecuteScalar<int>(query, new { inputEmail = token });
                
            }
            
            Bidding current_bid = new Bidding(_bid, auction.id, user_id);
            Console.WriteLine(user_id);
            
            string insertQuery = "INSERT INTO Bidding (value, time, auction_id, user_id) VALUES (@value, @time, @auction_id, @user_id)";
            database.Connection.Execute(insertQuery, current_bid);
            
        }
    }
}
