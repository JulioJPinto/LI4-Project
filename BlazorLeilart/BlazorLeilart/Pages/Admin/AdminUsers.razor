@page "/admin/users"
@using BlazorLeilart.Authentication

@inject Data.Interfaces.IUser userdb
@layout AdminLayout

@if (_loading)
{
  <div class="w-full px-16">
    <div class="py-8">
      <h2 class="text-3xl font-bold py-4">Users</h2>
      <div class="text-lg font-regular py-4">Users</div>
      @if (_users.Count != 0)
      {
        <ul role="list">
          @foreach (User u in _users)
          {
            <li class="flex justify-between py-8 px-4 my-2 rounded-md border-2 border-slate-300 hover:border-black">

              <div class="flex min-w-0 gap-x-4">
                <a href="/user/@TokenSession.Base64Encode(u.Email)">
                  <img class="h-12 w-12 flex-none rounded-full bg-gray-50" src="https://placehold.co/100" alt="">
                </a>
                <div class="min-w-0 flex-auto">
                  <p class="text-sm font-semibold leading-6 text-gray-900">@u.Email</p>
                  @if (u.Phone != "0")
                  {
                    <p class="mt-1 truncate text-xs leading-5 text-gray-500">@u.Phone</p>
                  }
                </div>
              </div>

              <div>
                @if (u.Admin)
                {
                  <a @onclick="() => RemoveAdminFunc(u)" class="mx-1"><PrimaryButton Title="Remove Admin"/></a>
                }
                else
                {
                  <a @onclick="() => MakeAdminFunc(u)" class="mx-1"><PrimaryButton Title="Make Admin"/></a>
                }
                
                <a class="mx-1"><PrimaryButton Title="Ban"/></a>
              </div>
            </li>
          }
        </ul>
      }
      
    </div>
  </div>
}

@code {

  public List<User> _users = null;
  public bool _loading = false;

  protected override async Task OnInitializedAsync()
  {
    Task.Delay(1000);
    _users = await userdb.GetAllUsersAsync();
    _loading = true;
  }

  public async Task MakeAdminFunc(User u)
  {
    userdb.MakeAdmin(u);
  }

  public async Task RemoveAdminFunc(User u)
  {
    userdb.RemoveAdmin(u);
  }

}
}