@using BlazorLeilart.Authentication
@using System.Text.Json;
@inject IJSRuntime js
<nav class= "border-gray-200 border-b-2 border-b-black w-full " >
  <div class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4">
    <a href="/" class="flex items-center space-x-3 rtl:space-x-reverse">
        <img src="images/leilart.svg" class="h-8 py-1" alt="Leilart" />
    </a>
    <button data-collapse-toggle="navbar-default" type="button" class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-black rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 17 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h15M1 7h15M1 13h15"/>
        </svg>
    </button>
  <div class="hidden w-full md:w-auto md:flex">
    <ul class="font-regular flex flex-col p-4 md:p-0 mt-4 border border-gray-100 rounded-lg bg-gray-50 md:flex-row md:space-x-8 rtl:space-x-reverse md:mt-0 md:border-0 md:bg-white">
      @foreach (KeyValuePair<string, string> link in _navLinks)
      {
        <li class="flex items-center">
          <a href="@link.Value" class="font-normal block py-2 px-3 text-black rounded md:bg-transparent md:text-black md:p-0" aria-current="page">@link.Key</a>
        </li>
      }
    </ul>
      
    <div class="mx-8 flex gap-x-4">
      @if (!_isLogedIn)
      {
        <a href="/login"><PrimaryButton Title="Log In"/></a>
        <a href="/signup"><PrimaryButton Title="Sign Up" CustomStyle="bg-black text-white"/></a>
      }
      else
      {
        <a href="/user"><PrimaryButton Title="Logged In"></PrimaryButton></a>
      }
    </div>
  </div>
  </div>
</nav>

@code {

  public static TokenSession _session = null;
  private bool _isLogedIn = (_session == null);
  

  private async Task GetAsync()
  {
    if (!await TryGetAsync())
      _session = null;
  }

  private async Task<bool> TryGetAsync()
  {
    bool hasProperty = await this.HasPropertyAsync();
    if (hasProperty)
    {
      string json = await js.InvokeAsync<string>("session");
      _session = JsonSerializer.Deserialize<TokenSession>(json);
    }
    return hasProperty;
  }

  private async Task<bool> HasPropertyAsync()
    => await js.InvokeAsync<bool>("session");
  
  private Dictionary<string, string> _navLinks = new Dictionary<string, string>()
  {
    {"Auctions", "/auctions"},
    {"About Us", "/about"},
    {"Team", "/team"},
    {"ToS", "/tos"}
  };

}